{{- /*
  Copyright Krack8, Inc. All Rights Reserved.
*/}}
{{- if eq .Values.controller.enabled true -}}
{{- if or (eq .Values.agent.enabled true) (and (eq .Values.db.mongo.internal.enabled true) (eq .Values.db.mongo.external.enabled false)) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "lighthouse.cleanup.job.name" . }}
  namespace: {{ include "lighthouse.namespace" . }}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: {{ include "lighthouse.controller.serviceAccount.name" . }}
      restartPolicy: Never
      containers:
        - name: kubectl
          image: bitnami/kubectl
          command:
            - /bin/sh
            - -c
            - |
              echo "Cleaning up orphan resources..."
              {{ if and (eq .Values.db.mongo.internal.enabled true) (eq .Values.db.mongo.external.enabled false) }}
              echo "Checking and deleting DB..."
              if kubectl get sts {{ include "lighthouse.db.mongo.name" . }} -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Deleting DB Statefulset..."
                kubectl delete sts {{ include "lighthouse.db.mongo.name" . }} -n {{ .Release.Namespace }}
              else
                echo "No DB StatefulsSet found. Skipping deletion."
              fi

              echo "Checking and deleting PVCs..."
              if kubectl get pvc -l app.kubernetes.io/name={{ printf "lighthouse" }} -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Deleting Secrets..."
                kubectl delete pvc -l app.kubernetes.io/name={{ printf "lighthouse" }} -n {{ .Release.Namespace }}
              else
                echo "No PVC found. Skipping deletion."
              fi
              {{ end }}
              {{ if eq .Values.agent.enabled true }}
              echo "Checking for Agent Deployment..."
              if kubectl get deploy {{ include "lighthouse.agent.name" . }} -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Deleting Agent Deployment..."
                kubectl delete deploy {{ include "lighthouse.agent.name" . }} -n {{ .Release.Namespace }}
              else
                echo "No Deployment found. Skipping deletion."
              fi

              echo "Checking for Secrets..."
              if kubectl get secret {{ include "lighthouse.agent.auth.secret.name" . }} -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Deleting Secrets..."
                kubectl delete secret {{ include "lighthouse.agent.auth.secret.name" . }} -n {{ .Release.Namespace }}
              else
                echo "No Secrets found. Skipping deletion."
              fi
              {{ end }}
              echo "Checking for Controller Deployment..."
              if kubectl get deploy {{ include "lighthouse.controller.name" . }} -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Deleting Controller Deployment..."
                kubectl delete deploy {{ include "lighthouse.controller.name" . }} -n {{ .Release.Namespace }}
              else
                echo "No Deployment found. Skipping deletion."
              fi
              echo "Checking for Webapp Deployment..."
              if kubectl get deploy {{ include "lighthouse.webapp.name" . }} -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Deleting Webapp Deployment..."
                kubectl delete deploy {{ include "lighthouse.webapp.name" . }} -n {{ .Release.Namespace }}
              else
                echo "No Deployment found. Skipping deletion."
              fi
{{- end }}
{{- end }}